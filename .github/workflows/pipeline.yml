name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - develop
      - 'release/*'
      - 'feature/*'
      - 'hotfix/*'
  pull_request:
    branches:
      - main
      - develop
      - 'release/*'
      - 'feature/*'
      - 'hotfix/*'

jobs:
  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint

      - name: Run Prettier Check
        run: npx prettier --check "**/*.{js,ts,json,md}"
        continue-on-error: true

      - name: Run Prettier Write
        run: npx prettier --write "**/*.{js,ts,json,md}"

  tests:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install dependencies
        run: npm ci

      - name: Run Unit Tests
        run: npm run test

      - name: Run Coverage Tests
        run: npm run test:coverage

  sonarcloud_analysis:
    name: SonarCloud Analysis
    runs-on: ubuntu-latest
    needs: tests
    if: startsWith(github.ref, 'refs/heads/release/') || github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: SonarCloud Scan
        uses: sonarsource/sonarcloud-github-action@v3
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_PROJECT_KEY: ${{ vars.SONAR_PROJECT_KEY }}
          SONAR_ORGANIZATION: ${{ vars.SONAR_ORGANIZATION }}
        with:
          args: >
            -Dsonar.projectKey=${{ env.SONAR_PROJECT_KEY }}
            -Dsonar.organization=${{ env.SONAR_ORGANIZATION }}

  build_and_push_ecr:
    name: Build and Push Docker Image to ECR
    runs-on: ubuntu-latest
    needs: sonarcloud_analysis
    if: startsWith(github.ref, 'refs/heads/release/') || github.ref == 'refs/heads/main'
    env:
      AWS_ROLE_ARN: ${{ vars.AWS_ROLE_ARN }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
      IMAGE_NAME: ${{ vars.APPLICATION_NAME }}
      IMAGE_TAG: ${{ github.sha }}
      AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
      AWS_REGION: ${{ vars.AWS_REGION }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ env.AWS_SESSION_TOKEN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: ecr_login
        uses: aws-actions/amazon-ecr-login@v2

      - name: Create ECR Repository if not exists
        run: |
          aws ecr describe-repositories --repository-names "${{ env.IMAGE_NAME }}" || \
          aws ecr create-repository --repository-name "${{ env.IMAGE_NAME }}"

      - name: List current directory contents
        run: ls -la

      - name: Build Docker Image
        run: |
          IMAGE_TAG=latest
          REPO_URI=${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.IMAGE_NAME }}
          docker build -t $REPO_URI:$IMAGE_TAG .

      - name: Push Docker Image to ECR
        run: |
          IMAGE_TAG=latest
          REPO_URI=${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.IMAGE_NAME }}
          docker push $REPO_URI:$IMAGE_TAG

  deploy_eks:
    name: Deploy to EKS
    runs-on: ubuntu-latest
    needs: build_and_push_ecr
    if: github.ref == 'refs/heads/main'
    env:
      AWS_ROLE_ARN: ${{ vars.AWS_ROLE_ARN }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
      IMAGE_NAME: ${{ vars.APPLICATION_NAME }}
      AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
      AWS_REGION: ${{ vars.AWS_REGION }}
      AWS_EKS_CLUSTER_NAME: ${{ vars.AWS_EKS_CLUSTER_NAME }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ env.AWS_SESSION_TOKEN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Update kubeconfig for EKS cluster
        run: |
          aws eks update-kubeconfig --name ${{ env.AWS_EKS_CLUSTER_NAME }} --region ${{ env.AWS_REGION }}

      - name: Ensure Namespace Exists
        run: |
          kubectl get namespace fiap || kubectl create namespace fiap

      - name: Set Kubernetes context to the EKS cluster
        run: kubectl config use-context arn:aws:eks:${{ env.AWS_REGION }}:${{ env.AWS_ACCOUNT_ID }}:cluster/${{ env.AWS_EKS_CLUSTER_NAME }}

      - name: Deploy Kubernetes resources
        run: |
          kubectl apply -f k8s/config-map.yaml
          kubectl apply -f k8s/deployment.yaml
          kubectl apply -f k8s/hpa.yaml
          kubectl apply -f k8s/service.yaml
